From 6a016ffba884e5ebd327020ebf944dbf4ebad72c Mon Sep 17 00:00:00 2001
From: xnrand <xnrand@gmail.com>
Date: Sat, 4 Apr 2015 23:53:18 +0200
Subject: [PATCH] Allow separating nicks for .tell with "/"

Instead of the command
    .tell yano* foo
you can now use
    .tell yano/yanome/yanope/msy foo

"/" binds stronger than ",", as follows:
Instead of
    .tell yano*,xnr* bar
you can now use
    .tell yano/yanome/yanope/msy,xnr/xnrand/xnrphone bar
as "*" still works, you could also use:
    .tell yano*/msy,xnr* bar
---
 modules/tell.py | 110 ++++++++++++++++++++++++++++++--------------------------
 1 file changed, 60 insertions(+), 50 deletions(-)

diff --git a/modules/tell.py b/modules/tell.py
index e344fd3..850c977 100644
--- a/modules/tell.py
+++ b/modules/tell.py
@@ -17,17 +17,16 @@ maximum = 4
 
 
 def loadReminders(fn, lock):
+    result = {}
     lock.acquire()
     try:
-        result = {}
-        f = open(fn)
-        for line in f:
-            line = line.strip()
-            if line:
-                try: tellee, teller, verb, timenow, msg = line.split('\t', 4)
-                except ValueError: continue  # @@ hmm
-                result.setdefault(tellee, []).append((teller, verb, timenow, msg))
-        f.close()
+        with open(fn) as f:
+            for line in f:
+                line = line.strip()
+                if line:
+                    try: tellee, teller, verb, timenow, msg = line.split('\t', 4)
+                    except ValueError: continue  # @@ hmm
+                    result.setdefault(tellee, []).append((teller, verb, timenow, msg))
     finally:
         lock.release()
     return result
@@ -36,14 +35,12 @@ def loadReminders(fn, lock):
 def dumpReminders(fn, data, lock):
     lock.acquire()
     try:
-        f = open(fn, 'w')
-        for tellee in data.iterkeys():
-            for remindon in data[tellee]:
-                line = '\t'.join((tellee,) + remindon)
-                try: f.write(line + '\n')
-                except IOError: break
-        try: f.close()
-        except IOError: pass
+        with open(fn, 'w') as f:
+            for tellee in data.iterkeys():
+                for remindon in data[tellee]:
+                    line = '\t'.join((tellee,) + remindon)
+                    try: f.write(line + '\n')
+                    except IOError: break
     finally:
         lock.release()
     return True
@@ -59,7 +56,7 @@ def setup(self):
             f.write('')
             f.close()
     self.tell_lock = threading.Lock()
-    self.reminders = loadReminders(self.tell_filename, self.tell_lock)  # @@ tell
+    self.reminders = loadReminders(self.tell_filename, self.tell_lock) # @@ tell
 
 
 def f_remind(jenni, input):
@@ -87,40 +84,48 @@ def f_remind(jenni, input):
     tellee = tellee.encode('utf-8')
     msg = msg.encode('utf-8')
 
-    tellee = tellee.rstrip('.,:;')
+    tellee = tellee.rstrip('.,:;/')
+    tellee = tellee.lstrip('.,:;/')
 
     if not os.path.exists(jenni.tell_filename):
         return
 
     timenow = time.strftime('%d %b %H:%MZ', time.gmtime())
     whogets = list()
-    for tellee in tellee.split(','):
-        if len(tellee) > 20:
-            jenni.say('Nickname %s is too long.' % (tellee))
-            continue
-        if not tellee.lower() in (teller.lower(), jenni.nick):  # @@
-            jenni.tell_lock.acquire()
-            try:
-                if not tellee.lower() in whogets:
-                    whogets.append(tellee)
-                    if tellee not in jenni.reminders:
-                        jenni.reminders[tellee] = [(teller, verb, timenow, msg)]
-                    else:
-                        jenni.reminders[tellee].append((teller, verb, timenow, msg))
-            finally:
-                jenni.tell_lock.release()
-    response = str()
-    if teller.lower() == tellee.lower() or tellee.lower() == 'me':
-        response = 'You can %s yourself that.' % (verb)
-    elif tellee.lower() == jenni.nick.lower():
-        response = "Hey, I'm not as stupid as Monty you know!"
+
+    for nickmask in tellee.split(','):
+        for anick in nickmask.split('/'):
+            if anick.lower() == teller.lower() or anick.lower() == 'me':
+                jenni.reply('You can %s yourself that.' % (verb))
+                return
+            if anick.lower() == jenni.nick.lower():
+                jenni.reply("Hey, I'm not as stupid as Monty you know!")
+                return
+            if len(anick) == 0:
+                jenni.reply("I don't know who this '' is!")
+                return
+            if len(anick) > 20:
+                jenni.reply("Nickname %s is too long." %(tellee))
+                return
+
+    jenni.tell_lock.acquire()
+    try:
+        for tellee in tellee.split(','):
+            if not tellee.lower() in whogets:
+                whogets.append(tellee)
+                if tellee not in jenni.reminders:
+                    jenni.reminders[tellee] = [(teller, verb, timenow, msg)]
+                else:
+                    jenni.reminders[tellee].append((teller, verb, timenow, msg))
+    finally:
+        jenni.tell_lock.release()
+
+    response = "I'll pass that on when %s is around."
+    if len(whogets) > 1:
+        listing = ', '.join(whogets[:-1]) + ', or ' + whogets[-1]
+        response = response % (listing)
     else:
-        response = "I'll pass that on when %s is around."
-        if len(whogets) > 1:
-            listing = ', '.join(whogets[:-1]) + ', or ' + whogets[-1]
-            response = response % (listing)
-        else:
-            response = response % (whogets[0])
+        response = response % (whogets[0])
 
     if not whogets: # Only get cute if there are not legits
         rand = random.random()
@@ -140,7 +145,6 @@ def getReminders(jenni, channel, key, tellee):
     today = time.strftime('%d %b', time.gmtime())
 
     jenni.tell_lock.acquire()
-
     try:
         for (teller, verb, datetime, msg) in jenni.reminders[key]:
             if datetime.startswith(today):
@@ -168,11 +172,17 @@ def message(jenni, input):
     reminders = []
     remkeys = list(reversed(sorted(jenni.reminders.keys())))
     for remkey in remkeys:
-        if not remkey.endswith('*') or remkey.endswith(':'):
-            if tellee.lower() == remkey.lower():
+        # multiple nicks separated by slashes
+        for nickmask in remkey.split('/'):
+            if nickmask == '':
+                continue
+            if not nickmask.endswith('*') or nickmask.endswith(':'):
+                if tellee.lower() == nickmask.lower():
+                    reminders.extend(getReminders(jenni, channel, remkey, tellee))
+                    break
+            elif tellee.lower().startswith(nickmask.rstrip('*:').lower()):
                 reminders.extend(getReminders(jenni, channel, remkey, tellee))
-        elif tellee.lower().startswith(remkey.rstrip('*:').lower()):
-            reminders.extend(getReminders(jenni, channel, remkey, tellee))
+                break
 
     for line in reminders[:maximum]:
         jenni.say(line)
-- 
1.8.4.5

